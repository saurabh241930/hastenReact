{"ast":null,"code":"var _jsxFileName = \"/home/sp/Desktop/hashtenDemo/client/src/components/AddDataForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createData } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddDataForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autocomplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createData(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        class: \"ui dividing header\",\n        children: \"Add single shift data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"enter title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"enter description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button secondary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'addDataForm',\n  validate\n})(AddDataForm);\nexport default connect(null, {\n  createData\n})(formWrapped);","map":{"version":3,"sources":["/home/sp/Desktop/hashtenDemo/client/src/components/AddDataForm.js"],"names":["React","Field","reduxForm","connect","createData","AddDataForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAcC,SAAd,QAA8B,YAA9B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SAYtCC,WAZsC,GAYxB,CAAC;AAACC,MAAAA,KAAD;AAAOC,MAAAA,KAAP;AAAaC,MAAAA;AAAb,KAAD,KAAwB;AAClC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAqC,EAAG,EAAnE;AACA,0BACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA,gCACI;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH,KAtBqC;;AAAA,SAwBtCK,QAxBsC,GAwB1BC,UAAD,IAAgB;AACvB,WAAKC,KAAL,CAAWb,UAAX,CAAsBY,UAAtB;AACH,KA1BqC;AAAA;;AAEtCF,EAAAA,WAAW,CAAC;AAACF,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,EAAiB;AACxB,QAAIA,OAAO,IAAID,KAAf,EAAqB;AACjB,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AAkBDM,EAAAA,MAAM,GAAE;AAEJ,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA,8BACI;AAAI,QAAA,KAAK,EAAC,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAtCqC;;AAyC1C,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,sBAAf;AACH;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,4BAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAVD;;AAYA,MAAMG,WAAW,GAAItB,SAAS,CAAC;AAC3BuB,EAAAA,IAAI,EAAC,aADsB;AAE3BL,EAAAA;AAF2B,CAAD,CAAT,CAGlBf,WAHkB,CAArB;AAMA,eAAeF,OAAO,CAAC,IAAD,EAAM;AAACC,EAAAA;AAAD,CAAN,CAAP,CAA2BoB,WAA3B,CAAf","sourcesContent":["import React from 'react'\r\nimport {Field,reduxForm} from 'redux-form';\r\nimport {connect} from 'react-redux';\r\nimport {createData} from '../actions';\r\n\r\nclass AddDataForm extends React.Component {\r\n\r\n    renderError({error,touched}){\r\n        if (touched && error){\r\n            return(\r\n                <div className=\"ui error message\">\r\n                    <div className=\"header\">{error}</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderInput = ({input,label,meta}) => {\r\n        const className = `field ${meta.error && meta.touched ? 'error':''}`\r\n        return (\r\n            <div className={className}>\r\n                <label>{label}</label>\r\n                <input {...input} autocomplete=\"off\"/>\r\n                {this.renderError(meta)}\r\n            </div>\r\n        \r\n        )\r\n    }\r\n\r\n    onSubmit = (formValues) => {\r\n        this.props.createData(formValues)\r\n    }\r\n\r\n    render(){ \r\n        \r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\r\n                <h4 class=\"ui dividing header\">Add single shift data</h4>\r\n                <Field name=\"title\" component={this.renderInput} label=\"enter title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"enter description\"/>\r\n                <button className=\"ui button secondary\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n    }\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {}\r\n    if (!formValues.title){\r\n        errors.title = 'You must enter title'\r\n    }\r\n    if (!formValues.description){\r\n        errors.description = 'You must enter description'\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nconst formWrapped =  reduxForm({\r\n    form:'addDataForm',\r\n    validate\r\n})(AddDataForm);\r\n\r\n\r\nexport default connect(null,{createData})(formWrapped);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}